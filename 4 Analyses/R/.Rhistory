install.packages("updateR")
install.packages("installr")
installr::updateR()
library(reshape)
install.packages("dplyr")
install.packages("reshape")
install.packages("ez")
install.packages("lrd")
install.packages("vectsects")
install.packages("Vectsects")
install.packages("VectSects")
install.packages("psych")
install.packages("Hmisc")
install.packages("PsychReport")
install.packages("psychReport")
install.packages("caret")
2406*.10
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/BOI-Norms/4 Analyses")
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/BOI-Norms/4 Analyses/R")
dat = read.csv("All_responses.csv")
dat2 = subset(dat,
dat$Source != "USM")
write.csv(dat2, file = "ALL_responses_NO USM.csv", row.names = F)
#read in data
dat = read.csv("All_responses_FINAL.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing=TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
View(Affordance_Strength)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses_FINAL.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing=TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
#write to file
#write.csv(Affordance_Strength2, file = "Affordance Norms.csv", row.names = F)
#write to file
write.csv(Affordance_Strength2, file = "Affordance Norms.csv", row.names = F)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses_FINAL.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing=TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
#write to file
#write.csv(Affordance_Strength2, file = "Affordance Norms.csv", row.names = F)
#write to file
write.csv(Affordance_Strength2, file = "Affordance Norms.csv", row.names = F)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses_FINAL.csv")
dat$CUE = to.lower(dat$CUE)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses_FINAL.csv")
dat$CUE = tolower(dat$CUE)
#fix
dat$CUE[dat$CUE == "ammo"] = "ammunition"
dat$CUE[dat$CUE == "antiques"] = "antique"
dat$CUE[dat$CUE == "apartments"] = "apartment"
dat$CUE[dat$CUE == "ashes"] = "ash"
dat$CUE[dat$CUE == "ax"] = "axe"
dat$CUE[dat$CUE == "axes"] = "axe"
dat$CUE[dat$CUE == "bagpipes"] = "bagpipe"
dat$CUE[dat$CUE == "bifocal"] = "bifocals"
dat$CUE[dat$CUE == "blackheads"] = "blackhead"
dat$CUE[dat$CUE == "boots"] = "boot"
dat$CUE[dat$CUE == "brassiere"] = "bra"
dat$CUE[dat$CUE == "breast"] = "breasts"
dat$CUE[dat$CUE == "brushes"] = "brush"
dat$CUE[dat$CUE == "buttock"] = "buttocks"
dat$CUE[dat$CUE == "cacti"] = "cactus"
dat$CUE[dat$CUE == "calves"] = "calf"
dat$CUE[dat$CUE == "canvass"] = "canvas"
dat$CUE[dat$CUE == "capes"] = "cape"
dat$CUE[dat$CUE == "carpeting"] = "carpet"
dat$CUE[dat$CUE == "capes"] = "cape"
dat$CUE[dat$CUE == "chopstick"] = "chopsticks"
dat$CUE[dat$CUE == "clips"] = "clip"
dat$CUE[dat$CUE == "clothing"] = "clothes"
dat$CUE[dat$CUE == "compasses"] = "compass"
dat$CUE[dat$CUE == "crackers"] = "cracker"
dat$CUE[dat$CUE == "cymbols"] = "cymbol"
dat$CUE[dat$CUE == "daddy"] = "dad"
dat$CUE[dat$CUE == "daggers"] = "dagger"
dat$CUE[dat$CUE == "denims"] = "denim"
dat$CUE[dat$CUE == "domino"] = "dominoes"
dat$CUE[dat$CUE == "drawer"] = "drawers"
dat$CUE[dat$CUE == "flannels"] = "flannel"
dat$CUE[dat$CUE == "genetalia"] = "genitals"
dat$CUE[dat$CUE == "goggle"] = "goggles"
dat$CUE[dat$CUE == "grocery"] = "groceries"
dat$CUE[dat$CUE == "ingredient"] = "ingredients"
dat$CUE[dat$CUE == "jean"] = "jeans"
dat$CUE[dat$CUE == "kids"] = "kid"
dat$CUE[dat$CUE == "catsup"] = "ketchup"
dat$CUE[dat$CUE == "kissing"] = "kiss"
dat$CUE[dat$CUE == "knuckles"] = "knuckle"
dat$CUE[dat$CUE == "leaves"] = "leaf"
dat$CUE[dat$CUE == "lilly"] = "lily"
dat$CUE[dat$CUE == "limes"] = "lime"
dat$CUE[dat$CUE == "machetes"] = "machete"
dat$CUE[dat$CUE == "mansions"] = "mansion"
dat$CUE[dat$CUE == "masseur"] = "masseuse"
dat$CUE[dat$CUE == "mayo"] = "mayonnaise"
dat$CUE[dat$CUE == "medics"] = "medic"
dat$CUE[dat$CUE == "medication"] = "medicine"
dat$CUE[dat$CUE == "mucus"] = "mucous"
dat$CUE[dat$CUE == "mullets"] = "mullet"
dat$CUE[dat$CUE == "needles"] = "needle"
dat$CUE[dat$CUE == "nutcrackers"] = "nutcracker"
dat$CUE[dat$CUE == "omelette"] = "omelet"
dat$CUE[dat$CUE == "pajama"] = "pajamas"
dat$CUE[dat$CUE == "plastics"] = "plastic"
dat$CUE[dat$CUE == "primates"] = "primate"
dat$CUE[dat$CUE == "props"] = "prop"
dat$CUE[dat$CUE == "rainfall"] = "rain"
dat$CUE[dat$CUE == "reciepts"] = "reciept"
dat$CUE[dat$CUE == "sax"] = "saxaphone"
dat$CUE[dat$CUE == "scissor"] = "scissors"
dat$CUE[dat$CUE == "seating"] = "seat"
dat$CUE[dat$CUE == "shaving"] = "shavings"
dat$CUE[dat$CUE == "shingles"] = "shingle"
dat$CUE[dat$CUE == "shrubbery"] = "shrub"
dat$CUE[dat$CUE == "sketchpad"] = "sketchbook"
dat$CUE[dat$CUE == "skittle"] = "skittles"
dat$CUE[dat$CUE == "spice"] = "spices"
dat$CUE[dat$CUE == "stair"] = "stairs"
dat$CUE[dat$CUE == "stationery"] = "stationary"
dat$CUE[dat$CUE == "strings"] = "string"
dat$CUE[dat$CUE == "suspender"] = "suspenders"
dat$CUE[dat$CUE == "syringes"] = "syringe"
dat$CUE[dat$CUE == "tong"] = "tongs"
dat$CUE[dat$CUE == "townspeople"] = "townsfolk"
dat$CUE[dat$CUE == "tranquilizers"] = "tranquilizer"
dat$CUE[dat$CUE == "traveller"] = "traveler"
dat$CUE[dat$CUE == "trucks"] = "truck"
dat$CUE[dat$CUE == "underclothing"] = "underclothes"
dat$CUE[dat$CUE == "undergarment"] = "underwear"
dat$CUE[dat$CUE == "underpants"] = "underwear"
dat$CUE[dat$CUE == "vaginal"] = "vagina"
dat$CUE[dat$CUE == "vitamin"] = "vitamins"
dat$CUE[dat$CUE == "weaponry"] = "weapon"
dat$CUE[dat$CUE == "whisker"] = "whiskers"
dat$CUE[dat$CUE == "wounds"] = "wound"
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing=TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
#write to file
#write.csv(Affordance_Strength2, file = "Affordance Norms.csv", row.names = F)
#write to file
write.csv(Affordance_Strength2, file = "Affordance Norms.csv", row.names = F)
