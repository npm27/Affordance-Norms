dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
20268/21275
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
wordlist = unique(tokens$token)
#Run the spell check
spelling.errors = hunspell(wordlist)
spelling.errors = unique(unlist(spelling.errors))
spelling.sugg = hunspell_suggest(spelling.errors, dict = dictionary("en_US"))
#Pick the first spelling suggestion
spelling.sugg = unlist(lapply(spelling.sugg, function(x) x[1]))
#manually check errors
spell_check = cbind(spelling.sugg, spelling.errors)
#Write to file and manually confirm
write.csv(spell_check, file = "spell_check.csv", row.names = F)
#read back in the checked output
spell_check = read.csv("spell_check.csv", stringsAsFactors = F)
spelling.sugg = as.list(spell_check$spelling.sugg)
#Now make a spelling dictionary
spelling.sugg = tolower(spelling.sugg)
spelling.sugg = as.list(spelling.sugg)
spelling.dict = as.data.frame(cbind(spelling.errors, spelling.sugg))
spelling.dict$spelling.pattern = paste0("\\b", spelling.dict$spelling.errors, "\\b")
View(spelling.dict)
View(dat)
View(tokens)
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = regex,
pattern = ",")
##This code is adopted from Buchanan et al. 2019's primer on processing feature production norms
#https://link.springer.com/article/10.1007/s10339-019-00939-6
####Set up####
##libraries
#Not sure if I'll be using all of these
library(dplyr)
library(here)
#Spelling
library(hunspell)
library(tidytext)
library(stringi)
library(stringr)
#Lemmas
library(koRpus)
library(koRpus.lang.en)
library(tokenizers)
library(textstem)
library(udpipe)
#stopwords
library(stopwords)
##read in data
master = read.csv("0-Data/combined_data_3_16_22.csv", stringsAsFactors = F)
##only keep the columns we need
dat = master[ , c(1, 5, 11, 13, 19, 33, 35)]
#useful column names
colnames(dat)[6] = "affordance_response"
#make blank cells NA
dat$affordance_response[dat$affordance_response == ""] = NA
##normalize all responses to lowercase
dat$affordance_response = tolower(dat$affordance_response)
#get rid of the don't knows
dat$affordance_response[dat$affordance_response == "idk"] = NA
dat$affordance_response[dat$affordance_response == " idk"] = NA
dat$affordance_response[dat$affordance_response == "idk what this is"] = NA
dat$affordance_response[dat$affordance_response == "idk what that is"] = NA
dat$affordance_response[dat$affordance_response == "im sorry idk what this is either"] = NA
dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
wordlist = unique(tokens$token)
#Run the spell check
spelling.errors = hunspell(wordlist)
spelling.errors = unique(unlist(spelling.errors))
spelling.sugg = hunspell_suggest(spelling.errors, dict = dictionary("en_US"))
#Pick the first spelling suggestion
spelling.sugg = unlist(lapply(spelling.sugg, function(x) x[1]))
#manually check errors
spell_check = cbind(spelling.sugg, spelling.errors)
#Write to file and manually confirm
write.csv(spell_check, file = "spell_check.csv", row.names = F)
#read back in the checked output
spell_check = read.csv("spell_check.csv", stringsAsFactors = F)
spelling.sugg = as.list(spell_check$spelling.sugg)
#Now make a spelling dictionary
spelling.sugg = tolower(spelling.sugg)
spelling.sugg = as.list(spelling.sugg)
spelling.dict = as.data.frame(cbind(spelling.errors, spelling.sugg))
spelling.dict$spelling.pattern = paste0("\\b", spelling.dict$spelling.errors, "\\b")
##How to use spelling dictionary to overwrite mispellings in dat?
##Remove white space from responses
#Parse affordances
#tokens = unnest_tokens(tbl = dat, output = token,
#                 input = affordance_response, token = stringr::str_split,
#                  pattern = " |\\, |\\.|\\,|\\;")
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = regex,
pattern = ",")
View(tokens)
##This code is adopted from Buchanan et al. 2019's primer on processing feature production norms
#https://link.springer.com/article/10.1007/s10339-019-00939-6
####Set up####
##libraries
#Not sure if I'll be using all of these
library(dplyr)
library(here)
#Spelling
library(hunspell)
library(tidytext)
library(stringi)
library(stringr)
#Lemmas
library(koRpus)
library(koRpus.lang.en)
library(tokenizers)
library(textstem)
library(udpipe)
#stopwords
library(stopwords)
##read in data
master = read.csv("0-Data/combined_data_3_16_22.csv", stringsAsFactors = F)
##only keep the columns we need
dat = master[ , c(1, 5, 11, 13, 19, 33, 35)]
#useful column names
colnames(dat)[6] = "affordance_response"
#make blank cells NA
dat$affordance_response[dat$affordance_response == ""] = NA
##normalize all responses to lowercase
dat$affordance_response = tolower(dat$affordance_response)
#get rid of the don't knows
dat$affordance_response[dat$affordance_response == "idk"] = NA
dat$affordance_response[dat$affordance_response == " idk"] = NA
dat$affordance_response[dat$affordance_response == "idk what this is"] = NA
dat$affordance_response[dat$affordance_response == "idk what that is"] = NA
dat$affordance_response[dat$affordance_response == "im sorry idk what this is either"] = NA
dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
wordlist = unique(tokens$token)
#Run the spell check
spelling.errors = hunspell(wordlist)
spelling.errors = unique(unlist(spelling.errors))
spelling.sugg = hunspell_suggest(spelling.errors, dict = dictionary("en_US"))
#Pick the first spelling suggestion
spelling.sugg = unlist(lapply(spelling.sugg, function(x) x[1]))
#manually check errors
spell_check = cbind(spelling.sugg, spelling.errors)
#Write to file and manually confirm
write.csv(spell_check, file = "spell_check.csv", row.names = F)
#read back in the checked output
spell_check = read.csv("spell_check.csv", stringsAsFactors = F)
spelling.sugg = as.list(spell_check$spelling.sugg)
#Now make a spelling dictionary
spelling.sugg = tolower(spelling.sugg)
spelling.sugg = as.list(spelling.sugg)
spelling.dict = as.data.frame(cbind(spelling.errors, spelling.sugg))
spelling.dict$spelling.pattern = paste0("\\b", spelling.dict$spelling.errors, "\\b")
##How to use spelling dictionary to overwrite mispellings in dat?
##Remove white space from responses
#Parse affordances
#tokens = unnest_tokens(tbl = dat, output = token,
#                 input = affordance_response, token = stringr::str_split,
#                  pattern = " |\\, |\\.|\\,|\\;")
##This code is adopted from Buchanan et al. 2019's primer on processing feature production norms
#https://link.springer.com/article/10.1007/s10339-019-00939-6
####Set up####
##libraries
#Not sure if I'll be using all of these
library(dplyr)
library(here)
#Spelling
library(hunspell)
library(tidytext)
library(stringi)
library(stringr)
#Lemmas
library(koRpus)
library(koRpus.lang.en)
library(tokenizers)
library(textstem)
library(udpipe)
#stopwords
library(stopwords)
##read in data
master = read.csv("0-Data/combined_data_3_16_22.csv", stringsAsFactors = F)
##only keep the columns we need
dat = master[ , c(1, 5, 11, 13, 19, 33, 35)]
#useful column names
colnames(dat)[6] = "affordance_response"
#make blank cells NA
dat$affordance_response[dat$affordance_response == ""] = NA
##normalize all responses to lowercase
dat$affordance_response = tolower(dat$affordance_response)
#get rid of the don't knows
dat$affordance_response[dat$affordance_response == "idk"] = NA
dat$affordance_response[dat$affordance_response == " idk"] = NA
dat$affordance_response[dat$affordance_response == "idk what this is"] = NA
dat$affordance_response[dat$affordance_response == "idk what that is"] = NA
dat$affordance_response[dat$affordance_response == "im sorry idk what this is either"] = NA
dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
#tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = regex,
pattern = ",")
View(dat)
##This code is adopted from Buchanan et al. 2019's primer on processing feature production norms
#https://link.springer.com/article/10.1007/s10339-019-00939-6
####Set up####
##libraries
#Not sure if I'll be using all of these
library(dplyr)
library(here)
#Spelling
library(hunspell)
library(tidytext)
library(stringi)
library(stringr)
#Lemmas
library(koRpus)
library(koRpus.lang.en)
library(tokenizers)
library(textstem)
library(udpipe)
#stopwords
library(stopwords)
##read in data
master = read.csv("0-Data/combined_data_3_16_22.csv", stringsAsFactors = F)
##only keep the columns we need
dat = master[ , c(1, 5, 11, 13, 19, 33, 35)]
#useful column names
colnames(dat)[6] = "affordance_response"
#make blank cells NA
dat$affordance_response[dat$affordance_response == ""] = NA
##normalize all responses to lowercase
dat$affordance_response = tolower(dat$affordance_response)
#get rid of the don't knows
dat$affordance_response[dat$affordance_response == "idk"] = NA
dat$affordance_response[dat$affordance_response == " idk"] = NA
dat$affordance_response[dat$affordance_response == "idk what this is"] = NA
dat$affordance_response[dat$affordance_response == "idk what that is"] = NA
dat$affordance_response[dat$affordance_response == "im sorry idk what this is either"] = NA
dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
#tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = regex,
pattern = ", ")
tokens = unnest_tokens(tbl = master, output = token,
input = affordance_response, token = regex,
pattern = ", ")
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = "regex",
pattern = ",")
View(tokens)
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = "regex",
pattern = ", ")
##This code is adopted from Buchanan et al. 2019's primer on processing feature production norms
#https://link.springer.com/article/10.1007/s10339-019-00939-6
####Set up####
##libraries
#Not sure if I'll be using all of these
library(dplyr)
library(here)
#Spelling
library(hunspell)
library(tidytext)
library(stringi)
library(stringr)
#Lemmas
library(koRpus)
library(koRpus.lang.en)
library(tokenizers)
library(textstem)
library(udpipe)
#stopwords
library(stopwords)
##read in data
master = read.csv("0-Data/combined_data_3_16_22.csv", stringsAsFactors = F)
##only keep the columns we need
dat = master[ , c(1, 5, 11, 13, 19, 33, 35)]
#useful column names
colnames(dat)[6] = "affordance_response"
#make blank cells NA
dat$affordance_response[dat$affordance_response == ""] = NA
dat$affordance_response[dat$affordance_response == "n/a"] = NA
##normalize all responses to lowercase
dat$affordance_response = tolower(dat$affordance_response)
#get rid of the don't knows
dat$affordance_response[dat$affordance_response == "idk"] = NA
dat$affordance_response[dat$affordance_response == " idk"] = NA
dat$affordance_response[dat$affordance_response == "idk what this is"] = NA
dat$affordance_response[dat$affordance_response == "idk what that is"] = NA
dat$affordance_response[dat$affordance_response == "im sorry idk what this is either"] = NA
dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
#tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
tokens = unnest_tokens(tbl = dat, output = token,
input = affordance_response, token = "regex",
pattern = ", ")
##This code is adopted from Buchanan et al. 2019's primer on processing feature production norms
#https://link.springer.com/article/10.1007/s10339-019-00939-6
####Set up####
##libraries
#Not sure if I'll be using all of these
library(dplyr)
library(here)
#Spelling
library(hunspell)
library(tidytext)
library(stringi)
library(stringr)
#Lemmas
library(koRpus)
library(koRpus.lang.en)
library(tokenizers)
library(textstem)
library(udpipe)
#stopwords
library(stopwords)
##read in data
master = read.csv("0-Data/combined_data_3_16_22.csv", stringsAsFactors = F)
##only keep the columns we need
dat = master[ , c(1, 5, 11, 13, 19, 33, 35)]
#useful column names
colnames(dat)[6] = "affordance_response"
#make blank cells NA
dat$affordance_response[dat$affordance_response == ""] = NA
dat$affordance_response[dat$affordance_response == "n/a"] = NA
##normalize all responses to lowercase
dat$affordance_response = tolower(dat$affordance_response)
#get rid of the don't knows
dat$affordance_response[dat$affordance_response == "idk"] = NA
dat$affordance_response[dat$affordance_response == " idk"] = NA
dat$affordance_response[dat$affordance_response == "idk what this is"] = NA
dat$affordance_response[dat$affordance_response == "idk what that is"] = NA
dat$affordance_response[dat$affordance_response == "im sorry idk what this is either"] = NA
dat$affordance_response[dat$affordance_response == "idk what it is"] = NA
dat$affordance_response[dat$affordance_response == "idk its a person"] = NA
dat$affordance_response[dat$affordance_response == "don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what that is"] = NA
dat$affordance_response[dat$affordance_response == "don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know"] = NA
dat$affordance_response[dat$affordance_response == "don't know"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a sawdust is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what a chronograph is"] = NA
dat$affordance_response[dat$affordance_response == "i don't know what it is"] = NA
dat$affordance_response[dat$affordance_response == "don't know word"] = NA
dat$affordance_response[dat$affordance_response == "i dont knwo"] = NA
dat$affordance_response[dat$affordance_response == "i dont know"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this means"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what this is"] = NA
dat$affordance_response[dat$affordance_response == "i dont know what that is"] = NA
dat$affordance_response[dat$affordance_response == "dont know"] = NA
dat$affordance_response[dat$affordance_response == "dont know what that is"] = NA
#Check for NAs
table(is.na(dat$affordance_response))
#remove nas
dat = na.omit(dat)
####Fix Spelling and Remove White Space####
##Spelling
#Extract a list of words
#tokens = unnest_tokens(tbl = dat, output = token, input = affordance_response)
parsed_afforances = unnest_tokens(tbl = dat, output = parsed,
input = affordance_response, token = "regex",
pattern = ", ")
View(parsed_afforances)
View(master)
