install.packages("updateR")
install.packages("installr")
installr::updateR()
library(reshape)
install.packages("dplyr")
install.packages("reshape")
install.packages("ez")
install.packages("lrd")
install.packages("vectsects")
install.packages("Vectsects")
install.packages("VectSects")
install.packages("psych")
install.packages("Hmisc")
install.packages("PsychReport")
install.packages("psychReport")
install.packages("caret")
2406*.10
####Set up####
#dat = read.csv("ALL_responses_FINAL.csv")
dat = read.csv("temp2.csv")
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/BOI-Norms/4 Analyses/R/Get IDs")
####Set up####
#dat = read.csv("ALL_responses_FINAL.csv")
dat = read.csv("temp2.csv")
dat2 = read.csv("raw names.csv")
library(dplyr)
#first, extract only the final cues
cue_list = unique(dat2$CUE)
cue_list = tolower(cue_list)
dat$CUE = tolower(dat$CUE)
#temp2 = data.frame()
#for(i in cue_list){
#  temp = subset(dat,
#               dat$CUE == i)
#  temp2 = rbind(temp, temp2)
#}
#length(unique(temp2$CUE))
#write.csv(temp2, file = "temp2.csv", row.names = F)
#okay, got about 20,000 is that don't match currently
#merged1 = merge(dat, aggregate(dat2$CUE, list(dat2$lemma, dat2$word, dat2$Group), head, 1), by = c("CUE", "lemma", "word", "Group"))
####Okay, let's quick test whether Mark's method and my method are getting at the same thing
verb = subset(dat,
dat2$POS = "VERB")
####Okay, let's quick test whether Mark's method and my method are getting at the same thing
verb = subset(dat,
dat$POS = "VERB")
View(dat)
####Okay, let's quick test whether Mark's method and my method are getting at the same thing
verb = subset(dat,
dat$POS == "VERB")
verb2 = subset(dat,
dat2$POS == "VERB")
merged1 = merge(verb, verb2, by = c("CUE", "lemma", "word", "GROUP"))
View(verb)
merged1 = merge(verb, verb2, by = c("CUE", "lemma", "word", "Group"))
View(merged1)
merged1 = merge(verb2, verb, by = c("CUE", "lemma", "word", "Group"))
View(merged1)
View(verb2)
verb2 = subset(dat2,
dat2$POS == "VERB")
merged1 = merge(verb2, verb, by = c("CUE", "lemma", "word", "Group"))
View(merged1)
merged2[!duplicated(merged1), ]
View(merged1)
merged1[!duplicated(merged1), ]
merged2 = merged1[!duplicated(merged1), ]
View(merged2)
merged1 = merged1[ , -10]
merged2 = merged1[!duplicated(merged1), ]
View(merged2)
verb %>%
mutate(rn = rowid(key)) %>%
full_join(verb2 %>%
mutate(rn = rowid(key))) %>%
select(-rn)
library(data.table)
verb %>%
mutate(rn = rowid(key)) %>%
full_join(verb2 %>%
mutate(rn = rowid(key))) %>%
select(-rn)
verb %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb2 %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
merged3 = verb %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb2 %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
View(merged3)
merged3 = verb2 %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb1 %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
merged3 = verb2 %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
View(merged3)
View(merged3)
merged4 = na.omit(merged3)
View(merged4)
verb = verb[ , -7]
merged3 = verb2 %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
merged4 = na.omit(merged3)
View(merged4)
merged3 = verb %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb2 %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
merged3 = verb2 %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb1 %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
merged3 = verb2 %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
merged4 = na.omit(merged3)
View(merged4)
merged3 = verb %>%
mutate(rn = rowid(CUE)) %>%
full_join(verb2 %>%
mutate(rn = rowid(CUE))) %>%
select(-rn)
196200+209196
####Need the total number of times the response occured, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("temp2.csv")
verbs = subset(responses, responses$POS == "VERB")
verbs$CUE = tolower(verbs$CUE)
ns$Cue = tolower(ns$Cue)
View(verbs)
####Compute####
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
View(ns)
ns = ns[order(ns$Cue)]
View(ns)
ns = ns[order(ns$Cue)]
ns = ns[order(ns$Cue), ]
colnames(ns)[1] = "CUE"
View(ns)
ns[2]
View(verbs2)
View(verbs2)
####Need the total number of times the response occured, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("temp2.csv")
verbs = subset(responses, responses$POS == "VERB")
verbs$CUE = tolower(verbs$CUE)
ns$Cue = tolower(ns$Cue)
####Compute####
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
ns = ns[order(ns$Cue), ]
colnames(ns)[1] = "CUE"
####Compute the measures
Affordance_Strength = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
temp_n = subset(ns,
ns$CUE == i)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFP = nrow(temp2) / temp_n[2]
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFP, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
#Affordance_percent
for(g in ns$n.unique){
}
}
View(temp_n)
temp_n[2]
4/temp_n[2]
temp_n$n.unique
####Need the total number of times the response occured, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("temp2.csv")
verbs = subset(responses, responses$POS == "VERB")
verbs$CUE = tolower(verbs$CUE)
ns$Cue = tolower(ns$Cue)
####Compute####
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
ns = ns[order(ns$Cue), ]
colnames(ns)[1] = "CUE"
####Compute the measures
Affordance_Strength = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
temp_n = subset(ns,
ns$CUE == i)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFP = nrow(temp2) / temp_n$n.unique
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFP, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing = TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
View(Affordance_Strength2)
write.csv(Affordance_Strength2, file = "Affordance Norms Final.csv", row.names = F)
####Need the total number of times the response occurred, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("All_responses_FINAL.csv")
##filter out dropped items
final_cues = ns$Cue
temp_response1 = data.frame()
for(i in final_cues){
temp_response2 = subset(responses,
responses$CUE == i)
temp_response1 = rbind(temp_response1, temp_response2)
}
length(unique(temp_response1$CUE))
temp_response1$CUE = tolower(temp_response1$CUE)
##filter out dropped items
ns$Cue = tolower(ns$Cue)
final_cues = ns$Cue
temp_response1 = data.frame()
temp_response1$CUE = tolower(temp_response1$CUE)
####Need the total number of times the response occurred, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("All_responses_FINAL.csv")
##filter out dropped items
ns$Cue = tolower(ns$Cue)
final_cues = ns$Cue
temp_response1 = data.frame()
temp_response1$CUE = tolower(temp_response1$CUE)
for(i in final_cues){
temp_response2 = subset(responses,
responses$CUE == i)
temp_response1 = rbind(temp_response1, temp_response2)
}
length(unique(temp_response1$CUE))
length(unique(ns$Cue))
length(final_cues)
responses$CUE = tolower(responses$CUE)
####Need the total number of times the response occurred, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("All_responses_FINAL.csv")
##filter out dropped items
ns$Cue = tolower(ns$Cue)
final_cues = ns$Cue
responses$CUE = tolower(responses$CUE)
temp_response1 = data.frame()
for(i in final_cues){
temp_response2 = subset(responses,
responses$CUE == i)
temp_response1 = rbind(temp_response1, temp_response2)
}
length(unique(temp_response2$CUE))
length(unique(temp_response2$CUE))
length(unique(temp_response1$CUE))
verbs = subset(temp_response1, temp_response1$POS == "VERB")
verbs$CUE = tolower(verbs$CUE)
ns$Cue = tolower(ns$Cue)
####Compute####
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
ns = ns[order(ns$Cue), ]
colnames(ns)[1] = "CUE"
View(verbs2)
####Compute the measures
Affordance_Strength = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
temp_n = subset(ns,
ns$CUE == i)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFP = nrow(temp2) / temp_n$n.unique
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFP, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing = TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
View(Affordance_Strength2)
Affordance_Strength2$AFP[Affordance_Strength2$AFP > 1] = 1
write.csv(Affordance_Strength2, file = "Affordance Norms Final.csv", row.names = F)
####Need the total number of times the response occurred, divided by the total number of participants who provided a response to the cue
ns = read.csv("affordance ns.csv")
responses = read.csv("All_responses_FINAL.csv")
##filter out dropped items
ns$Cue = tolower(ns$Cue)
final_cues = ns$Cue
responses$CUE = tolower(responses$CUE)
temp_response1 = data.frame()
for(i in final_cues){
temp_response2 = subset(responses,
responses$CUE == i)
temp_response1 = rbind(temp_response1, temp_response2)
}
verbs = subset(temp_response1, temp_response1$POS == "VERB")
verbs$CUE = tolower(verbs$CUE)
ns$Cue = tolower(ns$Cue)
####Compute####
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
ns = ns[order(ns$Cue), ]
colnames(ns)[1] = "CUE"
####Compute the measures
Affordance_Strength = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
temp_n = subset(ns,
ns$CUE == i)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFP = nrow(temp2) / temp_n$n.unique
AFSS = length(r_list)
temp3 = data.frame(cue, response, AFS, AFP, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
##now sort
Affordance_Strength2 = data.frame(matrix(ncol = 5,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFP", "AFSS"))))
for(k in cuelist){
temp4 = subset(Affordance_Strength,
Affordance_Strength$cue == k)
temp4 = temp4[order(temp4$AFS, decreasing = TRUE), ]
Affordance_Strength2 = rbind(Affordance_Strength2, temp4)
}
Affordance_Strength2$AFP[Affordance_Strength2$AFP > 1] = 1
#write.csv(Affordance_Strength2, file = "Affordance Norms Final.csv", row.names = F)
write.csv(Affordance_Strength2, file = "Affordance Norms Final.csv", row.names = F)
