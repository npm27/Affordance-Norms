install.packages(lrd)
install.packages('lrd')
install.packages("ggplot2")
install.packages("ez")
install.packages("reshape")
install.packages("stringr")
install.packages("stringi")
58000/12
58000 - 19900
19900 * .10
38100 * .12
4572 + 1990
58000-6562
51438/12
4286.5-400-430
3456.5-1005-120-220-500-200-75-60-100-200-100-30-10
90*4
3456.5-836.5
690+210+360+200+200+50+60+100+100
1970 / 2620
851.12*2
1702.24+820
2522.24 / 3456.5
15 * 20
300 * 4
1000
1000+3456
25.48/4
6.37831
6.37831*31
4300 - 1700
900 - 250
18.22*20
364*4
1456*12
1456*24
4833 * .70
3383 - 1005 - 30 - 30 - 400 - 100 - 175 - 200 - 50 - 200
58000 - 4664
5336 * .22
53336 * .22
40525 * .22
58000 - (4664 + 8915.5)
44420.5/12
58000 - 1990
56010 * .12
6721.2+1990
58000 - 8711.2
49288 / 12
1600/200
8 * .01
8*200
8 * .01
.08 * 200
1600/2
1/800
200 * 0.00125
ink = function(x){x * 0.0025}
ink(200)
200 * 0.00125
ink(100)
ink(100)
ink(300100)
ink(100)
200 * 0.00125
ink = function(x){x * 0.00125}
ink(200)
##convert ink to dollars
ink2dollars = function(x){x * 0.00125}
ink(200)
##convert ink to dollars
ink2dollars = function(x){x * 0.00125}
ink2dollars(500)
3000*12
setwd("~/GitHub/BOI-Norms/4 Analyses/R")
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
print(temp)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
print(temp)
}
print(temp2)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
print(temp2)
}
}
View(temp2)
temp2$CUE[1]
temp2$RESPONSE.LEMMA[1]
View(temp)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol=3,nrow=0, dimnames=list(NULL, c("cue", "response", "ASF"))))
View(Affordance_Strength)
temp3 = data.frame(cue, response, AFS)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
temp3 = data.frame(cue, response, AFS)
View(temp3)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol=3,nrow=0, dimnames=list(NULL, c("cue", "response", "ASF"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
temp3 = data.frame(cue, response, AFS)
Affordance_Strength = cbind(Affordance_Strength, temp3)
}
}
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol=3,nrow=0, dimnames=list(NULL, c("cue", "response", "ASF"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
temp3 = data.frame(cue, response, AFS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
View(Affordance_Strength)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol=3,nrow=0, dimnames=list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = nrow(temp)
temp3 = data.frame(cue, response, AFS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol=3,nrow=0, dimnames=list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = nrow(temp)
temp3 = data.frame(cue, response, AFS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = nrow(temp)
temp3 = data.frame(cue, response, AFS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
View(Affordance_Strength)
####Compute Affordance Strength####
##set up
#load libraries
library(reshape)
#read in data
dat = read.csv("All_responses.csv")
##Need to sum each unique response to a cue then divide by all cues
##Will only want to look at verb responses
verbs = subset(dat,
dat$POS == "VERB")
#Extract all unique cues
cuelist = unique(verbs$CUE)
#ensure alphabetical order
cuelist = sort(cuelist)
#now order verbs dataset alphabetically by cue
verbs2 = verbs[order(verbs$CUE), ]
##Test here
test = subset(verbs2,
verbs2$CUE == "abacus")
test2 = subset(test,
test$RESPONSE.LEMMA == "count")
AFS = nrow(test2)/nrow(test)
##Maybe write a loop? Outer loop that moves through cues, inner loop then moves through lemma responses
##at the end of each iteration, write cue, lemma.response, and value to DF?
Affordance_Strength = data.frame(matrix(ncol = 4,nrow = 0, dimnames = list(NULL, c("cue", "response", "AFS", "AFSS"))))
for(i in cuelist){
temp = subset(verbs2,
verbs2$CUE == i)
r_list = unique(temp$RESPONSE.LEMMA)
for(j in r_list){
temp2 = subset(temp,
temp$RESPONSE.LEMMA == j)
cue = temp2$CUE[1]
response = temp2$RESPONSE.LEMMA[1]
AFS = nrow(temp2) / nrow(temp)
AFSS = nrow(temp)
temp3 = data.frame(cue, response, AFS, AFSS)
Affordance_Strength = rbind(Affordance_Strength, temp3)
}
}
View(Affordance_Strength)
#write to file
write.csv(Affordance_Strength, file = "Affordance Norms", row.names = F)
#write to file
write.csv(Affordance_Strength, file = "Affordance Norms.csv", row.names = F)
setwd("~/GitHub/BOI-Norms/7 Shiny")
##load datasets here
affordances = read.csv("Affordance Norms.csv")
